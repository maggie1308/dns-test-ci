name: DNS Test CI Pipeline

# Определяем триггеры для запуска workflow: push или pull_request в main
on:
  push:
    branches:
      - main
    paths:
      - 'servers.txt'  # Мониторим изменения в servers.txt
      - 'ns*.example.com/**'  # Мониторим изменения в конфигурационных каталогах
  pull_request:
    branches:
      - main
    paths:
      - 'servers.txt'
      - 'ns*.example.com/**'

jobs:
  build-and-test:
    runs-on: ubuntu-latest  # Запускаем задачу на виртуальной машине Ubuntu

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2  # Получаем два последних коммита для сравнения изменений

      - name: Checkout dns-test repository
        uses: actions/checkout@v2
        with:
          repository: your-github-username/dns-test  # Клонируем репозиторий dns-test
          path: ../dns-test  # Указываем путь для клонирования

      # Шаг для проверки изменений в файле servers.txt и конфигурациях
      - name: Check for changes in servers.txt and configurations
        id: check-changes
        run: |
          CHANGED_FILES=$(git diff --name-only HEAD HEAD~1)  # Получаем список измененных файлов
          echo "Changed files in the last commit: $CHANGED_FILES"
          # Проверяем, что если изменен servers.txt, то другие изменения допустимы только в конфигурациях
          if [[ "$CHANGED_FILES" == *"servers.txt"* && ! "$CHANGED_FILES" =~ ^(servers.txt|ns.*.example.com/.*)$ ]]; then
            echo "::error::Changes in servers.txt must be accompanied by changes in corresponding configurations only."
            exit 1  # Завершаем выполнение с ошибкой
          fi
          # Если файл servers.txt был изменен, устанавливаем переменную окружения
          if [[ "$CHANGED_FILES" == *"servers.txt"* ]]; then
            echo "servers_txt_changed=true" >> $GITHUB_ENV

      # Генерация конфигурации docker-compose на основе servers.txt
      - name: Generate docker-compose configuration
        if: env.servers_txt_changed == 'true'  # Выполняем только если servers.txt изменен
        run: |
          python3 scripts/generate_docker_compose.py  # Запускаем скрипт генерации docker-compose.yml

      # Перезапуск контейнеров
      - name: Restart containers
        run: |
          docker-compose down  # Останавливаем текущие контейнеры
          docker-compose up -d  # Запускаем контейнеры заново

      # Проверка статуса запущенных контейнеров
      - name: Check container status
        run: docker-compose ps  # Проверяем статус всех контейнеров

      # Выполнение тестов DNS
      - name: Perform DNS Tests
        run: bash scripts/perform_dns_tests.sh  # Запускаем скрипт для проверки DNS

      # Откат и повторение тестов, если файл servers.txt не изменялся
      - name: Rollback and repeat tests if servers.txt not changed
        if: env.servers_txt_changed != 'true'
        run: |
          echo "Rolling back to previous commit..."
          git reset --hard HEAD~1  # Откатываемся на один коммит назад
          echo "Generating docker-compose configuration..."
          python3 scripts/generate_docker_compose.py  # Повторная генерация docker-compose.yml
          echo "Restarting containers..."
          docker-compose down  # Останавливаем контейнеры
          docker-compose up -d  # Запускаем их снова
          echo "Performing initial tests..."
          bash scripts/perform_dns_tests.sh  # Выполняем тесты DNS
          echo "Updating to the latest commit..."
          git reset --hard HEAD@{1}  # Возвращаемся к последнему коммиту
          echo "Forcing bind configurations reload..."
          docker exec ns1.example.com rndc reload  # Принудительная перезагрузка конфигураций BIND
          docker exec ns2.example.com rndc reload
          docker exec ns3.example.com rndc reload
          echo "Performing final tests..."
          bash scripts/perform_dns_tests.sh  # Повторное выполнение тестов DNS
