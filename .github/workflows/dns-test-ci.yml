name: DNS Test CI Pipeline

# Определяем, когда этот workflow должен запускаться
on:
  push:
    branches:
      - main
    paths:
      - 'servers.txt'
      - 'ns*.example.com/**'
  pull_request:
    branches:
      - main
    paths:
      - 'servers.txt'
      - 'ns*.example.com/**'

jobs:
  build-and-test:
    runs-on: ubuntu-latest # Запускаем задачу на виртуальной машине Ubuntu
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2 # Получаем два последних коммита, чтобы сравнить изменения

      # Шаг для проверки изменений в файле servers.txt и конфигурациях
      - name: Check for changes in servers.txt and configurations
        id: check-changes
        run: |
          CHANGED_FILES=$(git diff --name-only HEAD HEAD~1) # Получаем список измененных файлов
          echo "Changed files in the last commit: $CHANGED_FILES"
          # Если в коммите изменен servers.txt и есть изменения вне конфигурационных каталогов
          if [[ "$CHANGED_FILES" == *"servers.txt"* && ! "$CHANGED_FILES" =~ ^(servers.txt|ns.*.example.com/.*$) ]]; then
            echo "::error::Changes in servers.txt must be accompanied by changes in corresponding configurations only."
            exit 1 # Завершаем выполнение с ошибкой
          fi
          if [[ "$CHANGED_FILES" == *"servers.txt"* ]]; then
            echo "servers_txt_changed=true" >> $GITHUB_ENV # Устанавливаем переменную окружения
          

      # Шаг для генерации конфигурации docker-compose на основе servers.txt
      - name: Generate docker-compose configuration
        if: env.servers_txt_changed == 'true' # Выполняется, если был изменен servers.txt
        run: |
          # Здесь вызов скрипта, который генерирует docker-compose.yml из servers.txt
          python3 generate_docker_compose.py

      # Обновляем и перезапускаем контейнеры
      - name: Restart containers
        run: |
          docker-compose down
          docker-compose up -d

      # Шаг для проверки статуса запущенных контейнеров
      - name: Check container status
        run: |
          docker-compose ps

      # Шаг для выполнения тестов DNS
      - name: Perform DNS Tests
        run: |
          # Здесь вызов скрипта для тестирования DNS
          bash perform_dns_tests.sh

      # Шаг для отката и повторения тестов, если файл servers.txt не изменялся
      - name: Rollback and repeat tests if servers.txt not changed
        if: env.servers_txt_changed != 'true'
        run: |
          echo "Rolling back to previous commit..."
          git reset --hard HEAD~1 # Откатываемся на один коммит назад
          echo "Generating docker-compose configuration..."
          # Повторная генерация конфигурации
          python3 generate_docker_compose.py
          echo "Restarting containers..."
          docker-compose down
          docker-compose up -d
          echo "Performing initial tests..."
          # Повторное выполнение тестов
          bash perform_dns_tests.sh
          echo "Updating to the latest commit..."
          git reset --hard HEAD@{1} # Возвращаемся к последнему коммиту
          echo "Forcing bind configurations reload..."
          # Принудительная перезагрузка конфигураций BIND в контейнерах
          docker exec ns1.example.com rndc reload
          docker exec ns2.example.com rndc reload
          docker exec ns3.example.com rndc reload
          echo "Performing final tests..."
          # Повторное выполнение тестов с обновленной конфигурацией
          bash perform_dns_tests.sh
